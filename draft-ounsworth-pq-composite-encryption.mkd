---
title: Composite Encryption For Use In Internet PKI
abbrev: PQ Composite Certs
# <!-- EDNOTE: Edits the draft name -->
docname: draft-ounsworth-pq-composite-encryption-00

# <!-- stand_alone: true -->
area: Security
wg: LAMPS
kw: Internet-Draft
cat: std

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
    -
      ins: M. Ounsworth
      name: Mike Ounsworth
      org: Entrust Limited
      abbrev: Entrust
      street: 1000 Innovation Drive
      city: Ottawa, Ontario
      country: Canada
      code: K2K 1E3
      email: mike.ounsworth@entrust.com

    -
      ins: J. Gray
      name: John Gray
      org: Enrust Limited
      abbrev: Entrust
      email: john.gray@entrust.com

normative:
  RFC1421:
  RFC2119:
  RFC2986:
  RFC3211:
  RFC4210:
  RFC4648:
  RFC5280:
  RFC5652:
  RFC5958:
  RFC7468:
  RFC8174:
  RFC8411:
  X.690:
      title: "Information technology - ASN.1 encoding Rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)"
      date: November 2015
      author:
        org: ITU-T
      seriesinfo:
        ISO/IEC: 8825-1:2015


# <!-- EDNOTE: full syntax for this defined here: https://github.com/cabo/kramdown-rfc2629 -->

informative:
  I-D.draft-truskovsky-lamps-pq-hybrid-x509-01:
  I-D.draft-pala-composite-crypto-00:

<!--updates:
  RFC2986
  RFC5280
  RFC5652 -->
# <!-- EDNOTE: does it update these anymore?? -->


# <!-- EDNOTE: Add RFC 3279? -->

--- abstract
With the widespread adoption of post-quantum cryptography will come the need for an entity to possess multiple public keys on different cryptographic algorithms. Since the trustworthiness of individual post-quantum algorithms is at question, a multi-key cryptographic operation will need to be performed in such a way that breaking it requires breaking each of the component algorithms individually. This requires defining new structures for holding composite encryption data.


This document defines a content encryption process following the hybrid model as described in the NIST Post-Quantum Crypto FAQ. This draft defines id-composite-encryption which encrypts for a recipient with a composite public key by generating a shared secret for each of the recipient's component public keys and combining them into a single content encryption key using NIST SP 800-56Cr2.

<!-- End of Abstract -->


--- middle

# Introduction {#sec-intro}

During the transition to post-quantum cryptography, there will be uncertainty as to the strength of cryptographic algorithms; we will no longer fully trust traditional cryptography such as RSA, Diffie-Hellman, DSA and their elliptic curve variants, but we will also not fully trust their post-quantum replacements until they have had sufficient scrutiny. Unlike previous cryptographic algorithm migrations, the choice of when to migrate and which algorithms to migrate to, is not so clear. Even after the migration period, it may be advantageous for an entity's cryptographic identity to be composed of multiple public-key algorithms.

The deployment of composite public keys and composite encryption using post-quantum algorithms will face two challenges:

- Algorithm strength uncertainty: During the transition period, some post-quantum signature and encryption algorithms will not be fully trusted, while the trust in legacy public key algorithms will start to erode.  A relying party may learn some time after deployment that a public key algorithm has become untrustworthy, but in the interim, they may not know which algorithm an adversary has compromised.
- Backwards compatibility: During the transition period, post-quantum algorithms will not be supported by all clients.

This document provides a mechanism to address algorithm strength uncertainty by buliding on ~~ reference draft-ounsworth-pq-composite-pubkeys ~~ by providing formats for wrapping a content encryption key using multiple public key encryption mechanisms into existing fields. The issue of backwards compatibility is left open to be addressed in separate draft(s).

This document is intended for general applicability anywhere that content encryption is used.


<!-- End of Introduction section -->


## Terminology {#sec-terminology}
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{RFC2119}}  {{RFC8174}} when, and only when, they appear in all capitals, as shown here.

The following terms are used in this document:

ALGORITHM:
          An information object class for identifying the type of
            cryptographic operation to be performed. This document is
            primarily concerned with algorithms for producing encryption 
            keys.

BER:
          Basic Encoding Rules (BER) as defined in [X.690].

COMPONENT ALGORITHM:
          A single basic algorithm which is contained within a
            composite algorithm.

COMPOSITE ALGORITHM:
          An algorithm which is a sequence of one or more component
            algorithms, as defined in {{sec-composite-structs}}.

DER:
          Distinguished Encoding Rules as defined in [X.690].

KEY SHARE:
          A type of shared secret where a key splitting scheme is used to 
          distribute multiple secrets over different channels such that 
          some or all of the secrets must be re-combined to recover the 
          primary shared secret.

PUBLIC / PRIVATE KEY:
          The public and private portion of an asymmetric cryptographic
            key, making no assumptions about which algorithm.

PRIMITIVE PUBLIC KEY / SIGNATURE:
          A public key or signature object of a non-composite algorithm
          type.

SIGNATURE:
          A digital cryptographic signature, making no assumptions
            about which algorithm.

SECRET or SHARED SECRET:
        Cryptographic material established between two parties.
        May be generated by one party and send encrypted to the other, 
        or may be the output of an exchange of public information between two or more
        parties that generates a unique shared value for all involved parties.

KEY DERIVATION FUNCTION:
        A function used to derive secure secret keys using shared secrets, hashing 
        and other cryptographic primitives. 

COMPOSITE ENCRYPTION KEY:
        A structure that contains a sequence of content encryption keys, or secrets used to derive a content encryption keys.

TRIVIAL SECRET SHARING
        A method to securely share a secret among two or more parties where all parties need to combine their 
        intermediate secret to re-create the secret.


# Composite Structures {#sec-composite-structs}

EDNOTE: TODO: RE-WORK THIS SECTION.

In order for public keys and signatures to be composed of multiple algorithms, we define encodings consisting of a sequence of public key and signature primitives (aka "component algorithms") such that these structures can be used as a drop-in replacement for existing public key or signature fields such as those found in PKCS#10 [RFC2986], CMP [RFC4210], X.509 [RFC5280], CMS [RFC5652].

This section defines the following structures:

  - The id-alg-composite is an OID identifying a composite encryption object.

  - The CompositePrivateKey carries all the private keys associated with an identity within a single private key structure.

  - The CompositeEncryptedeKey is a sequence of encrypted elements that are generated by components of a CompositePrivateKey, and can be verified with the corresponding CompositePublicKey.

EDNOTE 2: the choice to define composite algorithm parameters as a sequence inside the existing fields avoids the exponential proliferation of OIDs that are needed for each combination of signature algorithms in other schemes for achieving multi-key certificates. This scheme also naturally extends from 2-keypair to n-keypair keys and certificates.

EDNOTE 2a: We have heard community feedback that the ASN.1 structures presented here are too flexible in that allow arbitrary combinations of an arbitrary number of encryption algorithms. The feedback is that this is too much of a "footgun" for implementors and sysadmins. We are working on an alternative formulation using ASN.1 information object classes that allow for compiling explicit pairs of algorithmIDs. We would love community feedback on which approach is preferred. See slide 30 of this presentation: https://datatracker.ietf.org/meeting/interim-2021-lamps-01/materials/slides-interim-2021-lamps-01-sessa-position-presentation-by-mike-ounsworth-00.pdf

## Algorithm Identifier {#sec-alg-identifier}

The same algorithm identifier is used for identifying a public key, a private key, and a signature.  Additional encoding information is provided below for each of these objects.

~~~ asn.1
id-alg-composite OBJECT IDENTIFIER ::= {
    iso(1)  identified-organization(3) dod(6) internet(1) private(4)
    enterprise(1) OpenCA(18227) Algorithms(2) id-alg-composite(1) }
~~~

EDNOTE 3: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see {{sec-iana}}.

EDNOTE: should this be an instance of RFC 5652's KeyEncryptionAlgorithmIdentifier ?

## Algorithm Parameters

Composite encryption algorithm parameters are OPTIONAL in general, though content and semantics varies by mode; see {{sec-com-key-trans_encr-params}}, {{sec-com-key-trans_kem-params}}, and {{sec-com-key-exchange-params}}.

## Composite Keys

A Composite encryption MUST be associated with a Composite public key as defined in ~~ reference draft-ounsworth-pq-composite-pubkey ~~. 


### Key Usage Bits

For protocols such as X.509 [RFC5280] that specify key usage along with the public key, then the composite public key associated with composite encryption MUST have a key usage that either protects a given content encryption key (Key Transport), or produces a content encryption key (Key Agreement) 

If the keyUsage extension is present in an end-entity certificate whose keys are being used with id-alg-composite encryption, then the keyUsage extension MUST contain one or both of the following values:

~~~
    keyEncipherment; and keyAgreement
~~~
{: artwork-name="Cert-Key-Usage-1"}


# Composite Key Transport using Encryption primitives {#sec-com-key-trans_encr}

In this composite encryption mode, a message to be encrypted is provided by the calling application. 
This message to be encrypted is assumed without loss of generality to be a symmetric content encryption key (CEK) which is assumed to have a size less maximum message size of the chosen encryption algorithms.

The recipient MUST have a composite public key which supports key transport operations. Where the recipient public key has an associated keyUsage as specified in [RFC5280], it MUST have keyUsage: keyEncipherment. In other words, the mechanism specified in this section applies only if all of the recipient's public keys are encryption algorithms.


Composite Key Transport using Encryption primitives uses a trivial XOR key-sharing scheme, as defined in {{sec-com-key-trans_encr_process}} to transport n secrets called key shares, where n is the number of recipient component public keys, and each share is encrypted under a different recipient component public key. The trivial XOR key-sharing scheme requires the recipient to use all component private keys in order to recover the content encryption key. Note that it would be possible to use an "n of m" or "threshold" secret sharing scheme if it was desired for the recipient to be able to complete the key transport using a subset of their private keys, but that mechanism is not defined in this document.

EDNOTE: we have not been able to find a reference and security analysis for the trivial XOR key-sharing scheme. This may need review by CFRG. We could re-frame this process as "a one-time pad with n-1 one-time pad keys, which we transport using the recipients public keys", then this could leverage one-time pad security analysis.


The id-alg-composite object identifier MUST be used to identify when a content-encryption key has been encrypted by a CompositePrivateKey. Composite encryption uses the following structure:

EDNOTE:  Should a different composite OID be used to determine the type of composite encryption (Key Transport or Key Agreement?).  Probably not because the desired key usage will be handled in the protocols that uses this privitive.

~~~ asn.1
CompositeEncryptedKey ::= EncryptedKey{ SEQUENCE SIZE (1..Max)  OF OCTET STRING}
~~~
{: artwork-name="CompositeEncryptionStructure"}

EDNOTE: This ASN.1 probably does not compile. The intent is that this fits into any EncryptedKey field, but defines some structure within the existing EncryptedKey ::= OCTET STRING, but I'm not sure exactly how to specify that.

Where each OCTET STRING within the SEQUENCE contains an encrypted key share encrypted under one of the recipient component public keys. The CompositeEncryptedKey MUST list encrypted values in the same order as the recipient public key's component keys.

## Algorithm parameters {#sec-com-key-trans_encr-params}

The composite key transport using encryption mode does not require additional parameters, and therefore any associated Params are ABSENT.

## Encryption process {#sec-com-key-trans_encr_process}

The process for performing Composite Key Transport using Encryption primitives is as follows:


The first n-1 key shares are random bit strings of the same length as 
the content encryption key.  The final key share is 
computed by XOR'ing the content encryption key with each of n-1 previous key shares.


~~~
Input:
     n                  The number of recipient component public keys
     P1, P2, .., Pn     Recipient component public keys
     CEK                The Content Encryption Key
     SIZE               The size of the Content Encryption Key in bits

Output:
     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key

Intermediate values:
     S1, S2, .., Sn     Key shares to be encapsulated by each 
                        component algorithm

Generation Procedure:
   1. Generate a set of n-1 key shares of the same length as the
      content encryption key
        for i := 1 to n-1
          Si := random_bits(SIZE)

   2. To generate key share Sn, compute the following
        Sn = CEK
        for i := 1 to n-1
          Sn = Sn XOR Si

   3. Encrypt each key share under a recipient public key
        for i := 1 to n
          Ei := encrypt(Si, Pi)

   4. Output E1, E2, .., En
~~~

Where `random_bits(SIZE)` is a cryptographically-secure random bit generator outputting SIZE bits.


## Decryption process {#sec-com-key-trans_decr_process}

To obtain the content-encryption key from a CompositeEncryptedKey, each component 
algorithm MUST be used to decrypt the set of key shares.  The key shares are then XOR'ed together to recover the content encryption key.

~~~
Input:
     n                  The number of recipient component public keys

     SK1, SK2, .., SKn  Recipient component secret keys
     
     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key


Intermediate values:
     S1, S2, .., Sn     Key shares to be decapsulated by each 
                        component algorithm

Output:
     CEK  The Content Encryption Key


Generation Procedure:
   1. Recover each key share
        for i := 1 to n
          Si := decrypt(Ei, SKi)

   2. Recover the CEK;
      For each intermediate shared-secret
        CEK = S1
        for i := 2 to n
           CEK = CEK XOR Si

   3. Output CEK
~~~



# Composite Key Transport using Encryption and KEM primitives {#sec-com-key-trans_kem}

This composite encryption mode is the generalization of the mode defined in {{sec-com-key-trans_encr}} to support a composite recipient public key which MAY contain an arbitrary mixture of encryption and key encapsulation machanism (KEM) component algorithms.

For a recipient composite public key to be applicable to this mode, all component KEMs MUST be capable of producing a shared secret of SIZE bits, where SIZE is the length in bits of the content encryption key (CEK) to be transported. This is assumed for the remainer of this section.

Security consideration: for a recipient composite public key to be applicable to this mode, all component KEMs SHOULD produce a shared secret whose bits are independent and uniformly distributed (aka "uniformly IID" or "uniformly random" or "full entropy") and therefore the shared secret is safe to use direcly as a symmetric key. If a recipient public key contains component KEMs which are not know to have this property, then implementors SHOULD use the more general mode described in section XXXX which incorporates the use of a key derivation function.

EDNOTE: also put this in the Security considerations section.

Given these conditions are met, the encryption process defined in {{sec-com-key-trans_encr_process}} applies almost directly with the following modifications:


~~~
Generation Procedure:
   1. Generate a set of key shares of the same length as the
      content encryption key
        for i := 1 to n-1
          if P1 is of type KEM:
            Si,Ei := encaps(P1)
          else:
            Si := random_bits(SIZE)

   ...

   3. Encrypt each key share under a recipient public key
        for i := 1 to n
          if P1 is of type KEM:
            skip  // Ei was already produced above
          else
            Ei := encrypt(Si, Pi)

~~~

Where `random_bits(SIZE)` is a cryptographically-secure random bit generator outputting SIZE bits.

The decryption process defined in {{sec-com-key-trans_decr_process}} applies directly where `decrypt()` is taken te be a `decaps()` when the underlying primitive is a KEM.


## Algorithm parameters {#sec-com-key-trans_kem-params}

The composite key transport using encryption and KEM primitives mode does not require additional parameters, and therefore any associated Params are ABSENT.


# Composite Key Exchange {#sec-com-key-exchange}


This mode is the most general in that it supports a composite recipient public key which MAY contain an arbitrary mixture of encryption, key encapsulation machanism (KEM), and key agreement component algorithms. However, due to the nature of key agreement algorithms, this mode cannot take a content encryption key as input, but instead generates a master shared secret as an output. As such, the nomenclature in this mode differs from the modes above. Where the recipient public key has an associated keyUsage as specified in [RFC5280], it MUST have keyUsage: keyEncipherment and or keyUsage: keyAgreement.

EDNOTE: I think this violates our public key draft where we say that the public key's KU MUST apply to all components. ... we did not want mixing of signatures and encryption keys, but I think in this case we do want to allow mixing of keyEncipherment and keyExchange keys. Not sure how to fix that.


The idea is to generate a component shared secret associated with each recipient public key, concatenate them together, and apply a key derivation function (KDF) to obtain the master shared secret. Implementations MUST use a KDF that is compatible with NIST SP-800 56Cr2 <TODO: cite properly>.

## Algorithm parameters {#sec-com-key-exchange-params}

The composite key exchange mode requires additional parameters to specify the KDF used to combine key shares into a master shared secret. 

   Params ::= KeyDerivationAlgorithmIdentifier

The KeyDerivationAlgorithmIdentifier type is specified in [RFC3211] and [RFC5652]. The KeyDerivationAlgorithmIdentifier definition is repeated
here for completeness.

    KeyDerivationAlgorithmIdentifier ::= AlgorithmIdentifier





## Encapsulation Process

EDNOTE: I'm not sure that's the right nomenclature.

~~~
Input:
     P1, P2, .., Pn     Public keys for the n component encryption
                        algorithms, a CompositePublicKey
    
    SIZE                The size, in bits, for shared secrets to be combined by both 
                        parties into a content encryption key. This value SHOULD correspond
                        to the size of the content encryption key.

    KDF                 A key derivation function

Output:
     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key

     M                  Master shared secret
    

Ciphertext Generation Procedure:
   1. Generate a set of key shares of the same length as the
      content encryption key
        for i := 1 to n-1
          if P1 is of type KEM or keyExchange:
            Si,Ei := encaps(P1)
          else:
            Si := random_bits(SIZE)

   2. Generate Z via concatenation
        Z = S1 || S2 || .. || Sn

   3. Generate the master shared secret via a KDF
        M = KDF(Z)

  4. Output M
     Output E1, E2, .., En

~~~
{: artwork-name="alg-composite-encaps"}


## Decapsulation Process

EDNOTE: I'm not sure that's the right nomenclature.

<TODO: needs words>

~~~
Input:
     n                  The number of recipient component public keys

     SK1, SK2, .., SKn  Recipient component secret keys

     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key

    KDF                 A key derivation function


Intermediate values:
     S1, S2, .., Sn     Key shares to be encapsulated by each 
                        component algorithm

Output:
     M                  Master shared secret
    

Ciphertext Generation Procedure:
   1. Recover each key share
        for i := 1 to n
          Si := decrypt_or_decaps(Ei, SKi)

   2. Generate Z via concatenation
        Z = S1 || S2 || .. || Sn

   3. Generate the master shared secret via a KDF
        M = KDF(Z)

  4. Output M
~~~
{: artwork-name="alg-composite-decaps"}










# Encoding Rules {#sec-encoding-rules}
<!-- EDNOTE 7: Examples of how other specifications specify how a data structure is converted to a bit string can be found in RFC 2313, section 10.1.4, 3279 section 2.3.5, and RFC 4055, section 3.2. -->

EDNOTE: this section was copied from the composite-sigs draft. Does it apply here since I've defined it above as an OCTET STRING already?
EDNOTE:   I think keeping this here is fine, one less reference to look up.

Many protocol specifications will require that the composite public key, composite private key, and composite encryption data structures be represented by an octet string or bit string.

When an octet string is required, the DER encoding of the composite data structure SHALL be used directly.

When a bit string is required, the octets of the DER encoded composite data structure SHALL be used as the bits of the bit string, with the most significant bit of the first octet becoming the first bit, and so on, ending with the least significant bit of the last octet becoming the last bit of the bit string.

In the interests of simplicity and avoiding compatibility issues, implementations that parse these structures MAY accept both BER and DER.


# Composite-OR encryption {#sec-comp-or-encr}


EDNOTE: does this still fit?


If the algorithm ID of the public key associated with this signature is id-composite-or-key then the encryptor MAY use only a subset of the component keys and therefore produce fewer ciphertexts than the number of recipient component keys.

Composite-OR encryption uses the same structures and algorithms as Composite, with the difference that the encryption process may emit a null instead of a ciphertext in step 2 for one or more component algorithms. A Composite-OR CompositeEncryptedKey MUST NOT be entirely null; it must contain at least one ciphertext.

The design intent of this mode is to support migration scenarios where an entity is encrypting for a peer which has been issued keys on algorithms that either the encryptor or the recipient do not (yet) support.

EDNOTE: Do we want to allow a Composite-OR with only a single ciphertext to produce non-composite EncryptedKey[RFC5652]? Advantages: bandwidth savings of an extra OID and some sequences with one element. Disadvantages: ambiguous whether a encrypted key is traditional or composite until you look at the corresponding key.   

EDNOTE:  I do not think we get a lot of value with Composite-OR with a single key because it is essentially just a wrapper around the regular algorithm.  I can see use for systems that recognize the composite structure which may not yet support all the component encryption algorithms, so a composite with algorithms that are not yet understood could be pushed out and one or more of the components could get used.

# In Practice {#sec-in-pract}

This section addresses practical issues of how this draft affects other protocols and standards.

<!-- End of In Practice section -->

# IANA Considerations {#sec-iana}
The ASN.1 module OID is TBD.  The id-alg-composite OID is to be assigned by IANA.  The authors suggest that IANA assign an OID on the id-pkix arc:

~~~
id-alg-composite OBJECT IDENTIFIER ::= {
    iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) algorithms(6) composite(??) }
~~~

<!-- End of IANA Considerations section -->


# Security Considerations

## Policy for Deprecated and Acceptable Algorithms

Traditionally, a public key, certificate, or signature contains a single cryptographic algorithm. If and when an algorithm becomes deprecated (for example, RSA-512, or SHA1), it is obvious that structures using that algorithm are implicitly revoked.

In the composite model this is less obvious since a single public key, certificate, or signature may contain a mixture of deprecated and non-deprecated algorithms. Moreover, implementers may decide that certain cryptographic algorithms have complementary security properties and are acceptable in combination even though neither algorithm is acceptable by itself.

Specifying a modified verification algorithm to handle these situations is beyond the scope of this draft, but could be desirable as the subject of an application profile document, or to be up to the discretion of implementers.

~~~
2. Check policy to see whether A1, A2, ..., An constitutes a valid
   combination of algorithms.

   if not checkPolicy(A1, A2, ..., An), then
     output "Invalid signature"
~~~

While intentionally not specified in this document, implementors should put careful thought into implementing a meaningfull policy mechinism within the context of their signature verification engines, for example only algorithms that provide similar security levels should be combined together.



<!-- End of Security Considerations section -->

# Appendices

## ASN.1 Module

EDNOTE: TODO: Update this from the signatures ASN.1.

~~~ asn.1

<CODE STARTS>

Composite-Signatures-2019
  { TBD }

DEFINITIONS IMPLICIT TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  PUBLIC-KEY, SIGNATURE-ALGORITHM
    FROM AlgorithmInformation-2009  -- RFC 5912 [X509ASN1]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-algorithmInformation-02(58) }

  SubjectPublicKeyInfo
    FROM PKIX1Explicit-2009
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-explicit-02(51) }

  OneAsymmetricKey
    FROM AsymmetricKeyPackageModuleV1
      { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
        pkcs-9(9) smime(16) modules(0)
        id-mod-asymmetricKeyPkgV1(50) } ;

--
-- Object Identifiers
--

id-alg-composite OBJECT IDENTIFIER ::= { TBD }

--
-- Public Key
--

pk-Composite PUBLIC-KEY ::= {
    IDENTIFIER id-alg-composite
    KEY CompositePublicKey
    PARAMS ARE absent
    PRIVATE-KEY CompositePrivateKey
}

CompositePublicKey ::= SEQUENCE SIZE (1..MAX) OF SubjectPublicKeyInfo

CompositePrivateKey ::= SEQUENCE SIZE (1..MAX) OF OneAsymmetricKey



END

<CODE ENDS>

~~~

## Intellectual Property Considerations

The following IPR Disclosure relates to this draft:

https://datatracker.ietf.org/ipr/3588/



# Contributors and Acknowledgements
This document incorporates contributions and comments from a large group of experts. The Editors would especially like to acknowledge the expertise and tireless dedication of the following people, who attended many long meetings and generated millions of bytes of electronic mail and VOIP traffic over the past year in pursuit of this document:

John Gray (Entrust),
Serge Mister (Entrust),
Scott Fluhrer (Cisco Systems),
Panos Kampanakis (Cisco Systems),
Daniel Van Geest (ISARA), and
Tim Hollebeek (Digicert).

We are grateful to all, including any contributors who may have
been inadvertently omitted from this list.

This document borrows text from similar documents, including those referenced below. Thanks go to the authors of those
   documents.  "Copying always makes things easier and less error prone" - [RFC8411].

## Making contributions

Additional contributions to this draft are weclome. Please see the working copy of this draft at, as well as open issues at:

https://github.com/EntrustCorporation/draft-ounsworth-composite-sigs

<!-- End of Contributors section -->
