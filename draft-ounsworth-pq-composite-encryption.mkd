---
title: Composite Encryption For Use In Internet PKI
abbrev: PQ Composite Certs
# <!-- EDNOTE: Edits the draft name -->
docname: draft-ounsworth-pq-composite-encryption-00

# <!-- stand_alone: true -->
area: Security
wg: LAMPS
kw: Internet-Draft
cat: std

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
    -
      ins: M. Ounsworth
      name: Mike Ounsworth
      org: Entrust Limited
      abbrev: Entrust
      street: 1000 Innovation Drive
      city: Ottawa, Ontario
      country: Canada
      code: K2K 1E3
      email: mike.ounsworth@entrust.com

    -
      ins: J. Gray
      name: John Gray
      org: Enrust Limited
      abbrev: Entrust
      email: john.gray@entrust.com

    -
      ins: S. Mister
      name: Serge Mister
      org: Enrust Limited
      abbrev: Entrust
      email: serge.mister@entrust.com
  

normative:
  RFC2119:
  RFC2986:
  RFC3211:
  RFC4210:
  RFC5280:
  RFC5652:
  RFC8174:
  RFC8411:
  X.690:
      title: "Information technology - ASN.1 encoding Rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)"
      date: November 2015
      author:
        org: ITU-T
      seriesinfo:
        ISO/IEC: 8825-1:2015


# <!-- EDNOTE: full syntax for this defined here: https://github.com/cabo/kramdown-rfc2629 -->

informative:

<!--updates:
  RFC2986
  RFC5280
  RFC5652 -->
# <!-- EDNOTE: does it update these anymore?? -->


# <!-- EDNOTE: Add RFC 3279? -->

--- abstract
With the widespread adoption of post-quantum cryptography will come the need for an entity to possess multiple public keys on different cryptographic algorithms. Since the trustworthiness of individual post-quantum algorithms is at question, a multi-key cryptographic operation will need to be performed in such a way that breaking it requires breaking each of the component algorithms individually. This requires defining new structures for holding composite encryption data.


This document defines a content encryption process following the hybrid model as described in the NIST Post-Quantum Crypto FAQ. This draft defines three composite encryption modes. First, Composite Key Transport using Encryption primitives which encrypts a message (typically a content encryption key) for a recipient with a composite public key composed entirely of encryption keys by masking it with an XOR key which is split into key shares and each share encrypted under a different recipient public key. Second, Composite Key Transport using Encryption and KEM primitives is the generalization of the previous mode to support a mixture of encryption and KEM algorithms. Third, Composite Key Exchange is the most general and supports establishing a shared secret using any combination of encryption, KEM, and key exchange primitives where a master shared secret is generated using NIST SP 800-56Cr2.

<!-- End of Abstract -->


--- middle

# Introduction {#sec-intro}

During the transition to post-quantum cryptography, there will be uncertainty as to the strength of cryptographic algorithms; we will no longer fully trust traditional cryptography such as RSA, Diffie-Hellman, DSA and their elliptic curve variants, but we will also not fully trust their post-quantum replacements until they have had sufficient scrutiny. Unlike previous cryptographic algorithm migrations, the choice of when to migrate and which algorithms to migrate to, is not so clear. Even after the migration period, it may be advantageous for an entity's cryptographic identity to be composed of multiple public-key algorithms.

The deployment of composite public keys and composite encryption using post-quantum algorithms will face two challenges:

- Algorithm strength uncertainty: During the transition period, some post-quantum signature and encryption algorithms will not be fully trusted, while the trust in legacy public key algorithms will start to erode.  A relying party may learn some time after deployment that a public key algorithm has become untrustworthy, but in the interim, they may not know which algorithm an adversary has compromised.
- Backwards compatibility: During the transition period, post-quantum algorithms will not be supported by all clients.

This document provides mechanisms to address algorithm strength uncertainty by building on ~~ reference draft-ounsworth-pq-composite-pubkeys ~~ by providing formats for both wrapping a content encryption key using multiple public key encryption mechanisms, or performing key exchange using a combination of encryption, key encapsulation, and key exchange primitives. The issue of backwards compatibility is addressed with support for Composite Or recipient keys in each mode.

This document is intended for general applicability anywhere that content encryption or key exchange is used.


<!-- End of Introduction section -->


## Terminology {#sec-terminology}
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{RFC2119}}  {{RFC8174}} when, and only when, they appear in all capitals, as shown here.

The following terms are used in this document:

ALGORITHM:
          An information object class for identifying the type of
            cryptographic operation to be performed. This document is
            primarily concerned with algorithms for producing encryption 
            keys.

BER:
          Basic Encoding Rules (BER) as defined in [X.690].

COMPONENT ALGORITHM:
          A single basic algorithm which is contained within a
            composite algorithm.

COMPOSITE ALGORITHM:
          An algorithm which is a sequence of one or more component
            algorithms..

DER:
          Distinguished Encoding Rules as defined in [X.690].

KEY SHARE:
          A type of shared secret where a key splitting scheme is used to 
          distribute multiple secrets over different channels such that 
          some or all of the secrets must be re-combined to recover the 
          primary shared secret.

PUBLIC / PRIVATE KEY:
          The public and private portion of an asymmetric cryptographic
            key, making no assumptions about which algorithm.

PRIMITIVE PUBLIC KEY / SIGNATURE:
          A public key or signature object of a non-composite algorithm
          type.

SIGNATURE:
          A digital cryptographic signature, making no assumptions
            about which algorithm.

SECRET or SHARED SECRET:
        Cryptographic material established between two parties.
        May be generated by one party and send encrypted to the other, 
        or may be the output of an exchange of public information between two or more
        parties that generates a unique shared value for all involved parties.

KEY DERIVATION FUNCTION:
        A function used to derive secure secret keys using shared secrets, hashing 
        and other cryptographic primitives. 

COMPOSITE ENCRYPTION KEY:
        A structure that contains a sequence of content encryption keys, or secrets used to derive a content encryption keys.

TRIVIAL SECRET SHARING
        A method to securely share a secret among two or more parties where all parties need to combine their 
        intermediate secret to re-create the secret.


# Composite Key Transport using Encryption primitives {#sec-com-key-trans_encr}

In this composite encryption mode, a message to be encrypted is provided by the calling application. 
This message to be encrypted is assumed without loss of generality to be a symmetric content encryption key (CEK) which is assumed to have a size less maximum message size of the chosen encryption algorithms.

This mode is compatible with protocols requiring a key transport primitive, such as CMS' KeyTransRecipientInfo [RFC5652].

Composite Key Transport using Encryption primitives uses a trivial XOR key-sharing scheme, as defined in {{sec-com-key-trans_encr_process}} to transport n secrets called key shares, where n is the number of recipient component public keys, and each share is encrypted under a different recipient component public key. The trivial XOR key-sharing scheme requires the recipient to use all component private keys in order to recover the content encryption key. Note that it would be possible to use an "n of m" or "threshold" secret sharing scheme if it was desired for the recipient to be able to complete the key transport using a subset of their private keys, but that mechanism is not defined in this document.

EDNOTE: we have not been able to find a reference and security analysis for the trivial XOR key-sharing scheme. This may need review by CFRG. We could re-frame this process as "a one-time pad with n-1 one-time pad keys, which we transport using the recipients public keys", then this could leverage one-time pad security analysis.

 Composite encryption uses the following structure:

EDNOTE:  Should a different composite OID be used to determine the type of composite encryption (Key Transport or Key Agreement?).  Probably not because the desired key usage will be handled in the protocols that uses this privitive.

~~~ asn.1
CompositeEncryptedKey ::= EncryptedKey{ SEQUENCE SIZE (2..Max)  OF OCTET STRING}
~~~
{: artwork-name="CompositeEncryptionStructure"}

EDNOTE: This ASN.1 probably does not compile. The intent is that this fits into any EncryptedKey field, but defines some structure within the existing EncryptedKey ::= OCTET STRING, but I'm not sure exactly how to specify that.

Where each OCTET STRING within the SEQUENCE contains an encrypted key share encrypted under one of the recipient component public keys. The CompositeEncryptedKey MUST list encrypted values in the same order as the recipient public key's component keys.

## Algorithm Identifier

The id-alg-composite-encryption object identifier MUST be used to identify the usage of this mode

~~~ asn.1
id-alg-composite-encryption OBJECT IDENTIFIER ::= {
    iso(1)  identified-organization(3) dod(6) internet(1) private(4)
    enterprise(1) OpenCA(18227) Algorithms(2) id-alg-composite-encryption(1) }
~~~

EDNOTE: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see {{sec-iana}}.

EDNOTE: I'm inventing OIDs on the OpenCA arc; need to put these in the Entrust arc.

## Public key and key usage

The recipient MUST have a composite public key which supports key transport operations. Where the recipient public key has an associated keyUsage as specified in [RFC5280], it MUST have keyUsage: keyEncipherment. In other words, the mechanism specified in this section applies only if all of the recipient's public keys are encryption algorithms.

### Composite-OR

The design intent of this mode is to support migration scenarios where a recipient has been provisioned with a composite key containing algorithms that its peers may not yet support. This mode allows the sender to encrypt for a subset of the recipient's public keys. Support for Composite OR subset encryption is indicated by the recipient at key generation time by marking its composite key with the id-composite-or-key algorithm identifier as defined in ~~~cite properly draft-ounsworth-pq-composite-keys~~~.

Policy mechanisms defining allowed subets of algorithms could be applied here, but are out of scope of this document. As defined in this document, a recipient marking their public key as id-composite-or-key must accept the risk that a sender may encrypt sensitive data for it using any one of its component keys in isolation. Composite Or is a direct tradeoff of lower security for increased migration flexibility.


## Algorithm parameters {#sec-com-key-trans_encr-params}

The composite key transport using encryption mode does not require additional parameters, and therefore any associated Params are ABSENT.

## Encryption process {#sec-com-key-trans_encr_process}

The process for performing Composite Key Transport using Encryption primitives is as follows:


The first n-1 key shares are random bit strings of the same length as 
the content encryption key.  The final key share is 
computed by XOR'ing the content encryption key with each of n-1 previous key shares.


~~~
Input:
     n                  The number of recipient component public keys
     P1, P2, .., Pn     Recipient component public keys
     CEK                The Content Encryption Key
     SIZE               The size of the Content Encryption Key in bits

Output:
     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key

Intermediate values:
     S1, S2, .., Sn     Key shares to be encapsulated by each 
                        component algorithm

Generation Procedure:

   1. If recipient public key is of type id-composite-or-key, determine the
      index of the last recipient public key to be encrypted for
        i_last := index of last Pi to be encrypted for
      Else,
        i_last = n


   2. To generate key share Sn, compute the following

      for i := 1 to n

        a. If id-composite-or-key and Pi is to be skipped
          Ei := null
          continue to next i

        b. If i == i_last
            Ei = encrypt(CEK, Pi)
          Else,
            Si := random_bits(SIZE)
            CEK := CEK XOR Si
            Ei = encrypt(Si, Pi)

          Sn = CEK
          for i := 1 to n-1
            Sn = Sn XOR Si

   4. Output E1, E2, .., En
~~~

Where `random_bits(SIZE)` is a cryptographically-secure random bit generator outputting SIZE bits.

If the sender does not support Composite Or encryption, this algorithm may be simplified by omitting step 1, 2a, and the if i == i_last statement in 2b.

The design intent is that Composite Or encryption with a single recipient key collapses to direct encryption of the CEK, and is binary compatible with legacy non-composite encryption.


## Decryption process {#sec-com-key-trans_decr_process}

To obtain the content-encryption key from a CompositeEncryptedKey, each component 
algorithm MUST be used to decrypt the set of key shares.  The key shares are then XOR'ed together to recover the content encryption key.

~~~
Input:
     n                  The number of recipient component public keys

     SK1, SK2, .., SKn  Recipient component secret keys
     
     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key


Intermediate values:
     S1, S2, .., Sn     Key shares to be decapsulated by each 
                        component algorithm

Output:
     CEK  The Content Encryption Key


Generation Procedure:
   1. Recover each key share
        for i := 1 to n
          if Ei == null
            Si := 0
          Else,
            Si := decrypt(Ei, SKi)

   2. Recover the CEK;
      For each intermediate shared-secret
        CEK = S1
        for i := 2 to n
           CEK = CEK XOR Si

   3. Output CEK
~~~

The if statement in step 1 (and ensuring its proper bit length for the XOR in step 2) is the only modification required to support Composite Or encryption. The designers have intentionally omitted a check that the recipient key is of type id-composite-or-key because even if the sender erroneously used composite or subset encryption for a recipient key which is not of type id-composite-or-key, the damage has already been done by encrypting and transmitting the data, no further harm can be done by decrypting it. However, where appropriate, clients SHOULD indicate a warning to users that this data was transmitted with weaker encrypting than their public key allows.


# Composite Key Transport using Encryption and KEM primitives {#sec-com-key-trans_kem}

This composite encryption mode is the generalization of the mode defined in {{sec-com-key-trans_encr}} to support a composite recipient public key which MAY contain an arbitrary mixture of encryption and key encapsulation mechanism (KEM) component algorithms.

This mode is compatible with protocols requiring a key transport primitive, such as CMS' KeyTransRecipientInfo [RFC5652].

Security consideration: for a recipient composite public key to be applicable to this mode, all component KEMs SHOULD produce a shared secret whose bits are independent and uniformly distributed (aka "uniformly IID" or "uniformly random" or "full entropy") and therefore the shared secret is safe to use direcly as a symmetric key. If a recipient public key contains component KEMs which are not know to have this property, then implementors SHOULD use the more general mode described in {{sec-com-key-exchange}} which incorporates the use of a key derivation function.

EDNOTE: also put this in the Security considerations section.

## Algorithm Identifier

The id-alg-composite-kem object identifier MUST be used to identify the usage of this mode

~~~ asn.1
id-alg-composite-kem OBJECT IDENTIFIER ::= {
    iso(1)  identified-organization(3) dod(6) internet(1) private(4)
    enterprise(1) OpenCA(18227) Algorithms(2) id-alg-composite-kem(1) }
~~~

EDNOTE: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see {{sec-iana}}.

EDNOTE: I'm inventing OIDs on the OpenCA arc; need to put these in the Entrust arc.

## Public key and key usage 

The recipient MUST have a composite public key which supports key transport or key encapsulation operations. Where the recipient public key has an associated keyUsage as specified in [RFC5280], it MUST have keyUsage: keyEncipherment. In other words, the mechanism specified in this section applies only if all of the recipient's public keys are encryption or KEM algorithms.

In addition, for a recipient composite public key to be applicable to this mode, all component KEMs MUST be capable of producing a shared secret of SIZE bits, where SIZE is the length in bits of the content encryption key (CEK) to be transported. This is assumed for the remainder of this section.

### Composite-OR

The design intent of this mode is to support migration scenarios where a recipient has been provisioned with a composite key containing algorithms that its peers may not yet support. This mode allows the sender to encrypt for a subset of the recipient's public keys. Support for Composite OR subset encryption is indicated by the recipient at key generation time by marking its composite key with the id-composite-or-key algorithm identifier as defined in ~~~cite properly draft-ounsworth-pq-composite-keys~~~.

Policy mechanisms defining allowed subets of algorithms could be applied here, but are out of scope of this document. As defined in this document, a recipient marking their public key as id-composite-or-key must accept the risk that a sender may encrypt sensitive data for it using any one of its component keys in isolation. Composite Or is a direct tradeoff of lower security for increased migration flexibility.

## Algorithm parameters {#sec-com-key-trans_kem-params}

The composite key transport using encryption and KEM mode does not require additional parameters, and therefore any associated Params are ABSENT.

## Encryption process

Given these conditions are met, the encryption process defined in {{sec-com-key-trans_encr_process}} is modified as follows:


~~~
Input:
     n                  The number of recipient component public keys
     P1, P2, .., Pn     Recipient component public keys
     CEK                The Content Encryption Key
     SIZE               The size of the Content Encryption Key in bits

Output:
     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key

Intermediate values:
     S1, S2, .., Sn     Key shares to be encapsulated by each 
                        component algorithm

Generation Procedure:

   1. If recipient public key is of type id-composite-or-key, determine the
      index of the last recipient public key to be encrypted for
        i_last := index of last Pi to be encrypted for
      Else,
        i_last = n

  
   2. 
      for i := 1 to n
        a. if id-composite-or-key and Pi is to be skipped
            Ei := null
            continue to next i

        b. If i == i_last
            Ei = encrypt(CEK, Pi)
          Else, if Pi is of type KEM:
            Si,Ei := encaps(Pi)
            CEK := CEK XOR Si
          Else:
            Si := random_bits(SIZE)
            CEK := CEK XOR Si
            Ei := encrypt(Si, Pi)

   4. Output E1, E2, .., En

~~~

Where `random_bits(SIZE)` is a cryptographically-secure random bit generator outputting SIZE bits.

If the sender does not support Composite Or encryption, this algorithm may be simplified by omitting step 1, 2a, and the if i == i_last statement in 2b.

The design intent is that Composite Or encryption with a single recipient key collapses to direct encryption of the CEK, and is binary compatible with legacy non-composite encryption or key encapsulation.


## Decryption process 

The decryption process defined in {{sec-com-key-trans_decr_process}} applies directly where `decrypt()` is substituted for `decaps()` when the underlying primitive is a KEM.



# Composite Key Exchange {#sec-com-key-exchange}


This mode is the most general in that it supports a composite recipient public key which MAY contain an arbitrary mixture of encryption, key encapsulation mechanism (KEM), and key agreement component algorithms. Due to the nature of key agreement algorithms, this mode cannot take a content encryption key as input, but instead generates a master shared secret as an output. As such, the nomenclature in this mode differs from the modes above. 

This mode is compatible with protocols requiring a key agreement primitive, such as CMS' KeyAgreeRecipientInfo [RFC5652].

Composite key exchange uses the underlying primitive to either encrypt for, encapsulate, or interactively do key agreement with each of the recipient's public keys, then all shared secrets are concatenated together and a KDF is applies as prescribed by NIST SP-800 56Cr2 <TODO: cite properly>.


## Algorithm Identifier

The id-alg-composite-keyex object identifier MUST be used to identify the usage of this mode

~~~ asn.1
id-alg-composite-keyex OBJECT IDENTIFIER ::= {
    iso(1)  identified-organization(3) dod(6) internet(1) private(4)
    enterprise(1) OpenCA(18227) Algorithms(2) id-alg-composite-keyex(1) }
~~~

EDNOTE: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see {{sec-iana}}.

EDNOTE: I'm inventing OIDs on the OpenCA arc; need to put these in the Entrust arc.


## Public key and key usage 

The recipient MUST have a composite public key which supports key transport, key encapsulation, or key exchange operations. Where the recipient public key has an associated keyUsage as specified in [RFC5280], it MUST have keyUsage: keyEncipherment, keyAgreement. This mode is the most general and places the fewest restrictions on the recipient public key.

EDNOTE: I think this violates our public key draft where we say that the public key's KU MUST apply to all components. ... we did not want mixing of signatures and encryption keys, but I think in this case we do want to allow mixing of keyEncipherment and keyExchange keys. Not sure how to fix that.


### Composite-OR

The design intent of this mode is to support migration scenarios where a recipient has been provisioned with a composite key containing algorithms that its peers may not yet support. This mode allows the sender to encrypt for a subset of the recipient's public keys. Support for Composite OR subset encryption is indicated by the recipient at key generation time by marking its composite key with the id-composite-or-key algorithm identifier as defined in ~~~cite properly draft-ounsworth-pq-composite-keys~~~.

Policy mechanisms defining allowed subets of algorithms could be applied here, but are out of scope of this document. As defined in this document, a recipient marking their public key as id-composite-or-key must accept the risk that a sender may encrypt sensitive data for it using any one of its component keys in isolation. Composite Or is a direct tradeoff of lower security for increased migration flexibility.



## Algorithm parameters {#sec-com-key-exchange-params}

The composite key exchange mode requires additional parameters to specify the KDF used to combine key shares into a master shared secret. 

    Params ::= KeyDerivationAlgorithmIdentifier

The KeyDerivationAlgorithmIdentifier type is specified in [RFC5652]. The KeyDerivationAlgorithmIdentifier definition is repeated
here for completeness.

    KeyDerivationAlgorithmIdentifier ::= AlgorithmIdentifier





## Encapsulation Process

Composite key exchange uses the underlying primitive to either encrypt for, encapsulate, or interactively do key agreement with each of the recipient's public keys, then all shared secrets are concatenated together and a KDF is applies as prescribed by NIST SP-800 56Cr2 <TODO: cite properly>.

~~~
Input:
     P1, P2, .., Pn     Public keys for the n component encryption
                        algorithms, a CompositePublicKey
    
    SIZE                The size, in bits, for shared secrets to be combined by both 
                        parties into a content encryption key. This value SHOULD correspond
                        to the size of the content encryption key.

    KDF                 A key derivation function

Output:
     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key

     M                  Master shared secret
    

Ciphertext and master secret Generation Procedure:
     1. Generate a set of key shares of the same length as the
      content encryption key
        for i := 1 to n

      a. if id-composite-or-key and Pi is to be skipped
            Si = EMPTY_STRING
            Ei := null
            continue to next i

      b. if P1 is of type KEM or keyExchange:
            Si,Ei := encaps(Pi)
        else:
            Si := random_bits(SIZE)
            Ei := encrypt(Si, Pi)

   2. Generate Z via concatenation
        Z = S1 || S2 || .. || Sn

   3. Generate the master shared secret via a KDF
        M = KDF(Z)

   4. Output M
        Output E1, E2, .., En

~~~
{: artwork-name="alg-composite-encaps"}

"EMPTY_STRING" indicates a string or byte array of length zero so that that value as essentially omitted from the concatenation in step 2.

In cases where KDF is extensible output function, the length of M must be carried in the KeyDerivationAlgorithmIdentifier defined in {{sec-com-key-exchange-params}}.

If the sender does not support Composite Or encryption, this algorithm may be simplified by omitting step 2a.

The design intent is that Composite Or key exchange with a single recipient key collapses to direct key exchange with a single algorithm, and is binary compatible with legacy non-composite encryption, key encapsulation, or key exchange.

## Decapsulation Process

~~~
Input:
     n                  The number of recipient component public keys

     SK1, SK2, .., SKn  Recipient component secret keys

     E1, E2, .., En     EncryptedKey values corresponding to each recipient
                        component public key

     KDF                A key derivation function


Intermediate values:
     S1, S2, .., Sn     Key shares to be encapsulated by each 
                        component algorithm

Output:
     M                  Master shared secret
    

 Master Secret Recovery Procedure:
   1. Recover each key share
        for i := 1 to n
          if Ei == null
            Si = EMPTY_STRING
          Si := decrypt_or_decaps(Ei, SKi)

   2. Generate Z via concatenation
        Z = S1 || S2 || .. || Sn

   3. Generate the master shared secret via a KDF
        M = KDF(Z)

  4. Output M
~~~
{: artwork-name="alg-composite-decaps"}

"EMPTY_STRING" indicates a string or byte array of length zero so that that value as essentially omitted from the concatenation in step 2.

The if statement in step 1 is the only modification required to support Composite Or encryption. The designers have intentionally omitted a check that the recipient key is of type id-composite-or-key because even if the sender erroneously used composite or subset for a recipient key which is not of type id-composite-or-key, the damage has already been done by generating a master secret and potentially transmitting data encrypted with it, no further harm can be done by decrypting it. However, where appropriate, clients SHOULD indicate a warning to users that this data was transmitted with weaker encrypting than their public key allows.


# In Practice {#sec-in-pract}

This section addresses practical issues of how this draft affects other protocols and standards.

<!-- End of In Practice section -->

# IANA Considerations {#sec-iana}
The ASN.1 module OID is TBD.  The id-alg-composite OID is to be assigned by IANA.  The authors suggest that IANA assign an OID on the id-pkix arc:

~~~
id-alg-composite OBJECT IDENTIFIER ::= {
    iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) algorithms(6) composite(??) }
~~~

<!-- End of IANA Considerations section -->


# Security Considerations

## Policy for Deprecated or Unacceptable Algorithms

Traditionally, a public key, certificate, or signature contains a single cryptographic algorithm. If and when an algorithm becomes deprecated (for example, RSA-512, or SHA1), it is obvious that structures using that algorithm are implicitly revoked.

In the composite model this is less obvious since a single public key, certificate, or signature may contain a mixture of deprecated and non-deprecated algorithms. Moreover, implementers may decide that certain cryptographic algorithms have complementary security properties and are acceptable in combination even though neither algorithm is acceptable by itself.

Specifying a modified verification algorithm to handle these situations is beyond the scope of this draft, but could be desirable as the subject of an application profile document, or to be up to the discretion of implementers.

~~~
2. Check policy to see whether A1, A2, ..., An constitutes a valid
   combination of algorithms.

   if not checkPolicy(A1, A2, ..., An), then
     output "Invalid signature"
~~~

While intentionally not specified in this document, implementors should put careful thought into implementing a meaningful policy mechinism within the context of their signature verification engines, for example only algorithms that provide similar security levels should be combined together.

## Composite-OR modes

Composite-OR eases migration at the expense of security. For composite encryption and key encapsulation, the weakening of security is entirely at the discretion of the sender, since once data has been encrypted and transmitted with weak ciphers, there is nothing the recipient can do to protect the data against record & decrypt attacks. Clients performing Composite Or encryption operations MUST ensure that the recipient's public key is of type id-composite-or-key before producing a ciphertext with a subset of the recipient's public keys.

For some cases of composite key exchange, notably when the underlying key exchange primitive is used in a fully interactive (aka "ephemeral-ephemeral") mode, the sender cannot begin encrypting data until the recipient has completed the key exchange. The recipient SHOULD reject the connection if one or more null ciphertexts are encountered when the recipient's public key is not of type id-composite-or-key.

<!-- End of Security Considerations section -->

# Appendices

## ASN.1 Module

~~ TODO ~~

~~~

## Intellectual Property Considerations

The following IPR Disclosure relates to this draft:

https://datatracker.ietf.org/ipr/3588/



We are grateful to all, including any contributors who may have
been inadvertently omitted from this list.

This document borrows text from similar documents, including those referenced below. Thanks go to the authors of those
   documents.  "Copying always makes things easier and less error prone" - [RFC8411].

## Making contributions

Additional contributions to this draft are weclome. Please see the working copy of this draft at, as well as open issues at:

https://github.com/EntrustCorporation/draft-ounsworth-pq-composite-encryption

<!-- End of Contributors section -->
